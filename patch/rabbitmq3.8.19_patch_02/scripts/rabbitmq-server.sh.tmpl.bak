#!/usr/bin/env bash

set -eo pipefail

myPath="$0"

cleanUp() {
  local rc=$?
  [ "$rc" -eq 0 ] || echo "# Failed ($rc)! Please check confd logs." >> $myPath
  return $rc
}

trap cleanUp EXIT

rotate() {
  local path=$1 maxFilesCount=5
  for i in $(seq 1 $maxFilesCount | tac); do
    if [ -f "${path}.$i" ]; then mv ${path}.$i ${path}.$(($i+1)); fi
  done
  if [ -f "$path" ]; then cp $path ${path}.1; fi
}

flush() {
  local targetFile=$1
  if [ -n "$targetFile" ]; then
    rotate $targetFile
    cat > $targetFile -
  else
    cat -
  fi
}

applyEnvs() {
  local -r envFile=/opt/app/bin/envs/confd.env
  if [ -f "$envFile" ]; then . $envFile; fi
  local -r nodeEnvFile=/opt/app/bin/envs/nodectl.env
  if [ -f "$nodeEnvFile" ]; then . $nodeEnvFile; fi
}

applyEnvs

flush /var/lib/rabbitmq/.erlang.cookie << ERLNAG_COOKIE_EOF
{{ getv "/cluster/cluster_id" }}
ERLNAG_COOKIE_EOF

{{- if getvs "/host/role" | filter "(disc|ram)" }}
mkdir -p ${DATA_MOUNTS}/log/rabbitmq
{{- end }}

{{- $myRole := getv "/host/role" }}

flush  /etc/rabbitmq/rabbitmq.conf << RABBITMQ_CONF_EOF
background_gc_enabled = {{ getv "/env/background_gc_enabled" "true" }}
background_gc_target_interval = {{ getv "/env/background_gc_target_interval" "60000" }}
channel_max = {{ getv "/env/channel_max" "10" }}

# Cluster formation
cluster_formation.peer_discovery_backend = etcd
{{- $clusterId := getv "/cluster/cluster_id" }}
{{- $etcdHosts := getvs "/links/etcd_service/hosts/etcd_node/*/ip" }}
{{- range $i,$endpoint := $etcdHosts }}
cluster_formation.etcd.endpoints.{{ add $i 1 }} = {{ $endpoint }}:2379
{{- end }}
cluster_formation.etcd.key_prefix = /{{ $clusterId }}_prefix
cluster_formation.etcd.cluster_name = {{ $clusterId }}
cluster_formation.etcd.node_ttl = 30
cluster_formation.etcd.lock_timeout = 300
cluster_formation.node_cleanup.only_log_warning = true
cluster_formation.node_cleanup.interval = 90


cluster_keepalive_interval = {{ getv "/env/cluster_keepalive_interval" "10000" }}
cluster_partition_handling = {{ getv "/env/cluster_partition_handling" "pause_minority" }}
collect_statistics = {{ getv "/env/collect_statistics" "none" }}
collect_statistics_interval = {{ getv "/env/collect_statistics_interval" "5000" }}
# disk_free_limit.relative = {{ getv "/env/disk_free_limit_relative" "2.0" }}
disk_free_limit.absolute = {{ getv "/env/disk_free_limit" "50MB" }}
frame_max = {{ getv "/env/frame_max" "131072"}}
handshake_timeout = {{ getv "/env/handshake_timeout" "10000" }}
heartbeat = {{ getv "/env/heartbeat" "60" }}
loopback_users.guest = false
num_acceptors.tcp = {{ getv "/env/num_tcp_acceptors" "10" }}
proxy_protocol = {{ getv "/env/proxy_protocol" "false" }}
reverse_dns_lookups = {{ getv "/env/reverse_dns_lookups" "false" }}
tcp_listen_options.backlog = 128
tcp_listen_options.nodelay = true
tcp_listen_options.exit_on_close = false
tcp_listen_options.keepalive = true
tcp_listen_options.send_timeout = 15000
tcp_listen_options.buffer = 196608
tcp_listen_options.sndbuf = 196608
tcp_listen_options.recbuf = 196608
vm_memory_high_watermark.relative = {{ getv "/env/vm_memory_high_watermark" "0.7" }}
# vm_memory_high_watermark.absolute = {{ getv "/env/vvm_memory_high_watermark_absolute" "2G" }}
vm_memory_high_watermark_paging_ratio = {{ getv "/env/vm_memory_high_watermark_paging_ratio" "0.5" }}
log.dir = ${DATA_MOUNTS}/log/rabbitmq/
default_user = {{ getv "/env/rabbitmq_default_user" "guest" }}
default_pass = {{ getv "/env/rabbitmq_default_pass" "guest" }}
loopback_users = none
default_user_tags.administrator = true
log.file.level = debug
RABBITMQ_CONF_EOF
rabbitmqctl change_password '{{ getv "/env/rabbitmq_default_user" "guest" }}' '{{ getv "/env/rabbitmq_default_pass" "guest" }}' >/dev/null 2>&1||echo

hostsFile=/etc/hosts

sed "/^# >> RabbitMQ nodes./,/^# << RabbitMQ nodes./d" $hostsFile > $hostsFile.swap

flush >> $hostsFile.swap << HOSTS_FILE
# >> RabbitMQ nodes. WARNING: this is managed by script and please don't touch manually.
{{- range $role := split "disc ram" " " }}
{{- range $node := ls (printf "/hosts/%s" $role) }}
{{ getv (printf "/hosts/%s/%s/ip" $role $node) }}	{{ getv (printf "/hosts/%s/%s/instance_id" $role $node) }}
{{- end }}
{{- end }}
# << RabbitMQ nodes. WARNING: this is managed by script and please don't touch manually.
HOSTS_FILE
mv $hostsFile.swap $hostsFile


flush /etc/rabbitmq/rabbitmq-env.conf << RABBIT_ENV_CONF_EOF

RABBITMQ_NODE_IP_ADDRESS=0.0.0.0
RABBITMQ_NODE_PORT=5672
RABBITMQ_MNESIA_BASE=${DATA_MOUNTS}/mnesia
RABBITMQ_LOG_BASE=${DATA_MOUNTS}/log/rabbitmq/
RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq
RABBITMQ_MNESIA_DIR=
RABBITMQ_SCHEMA_DIR=${DATA_MOUNTS}/schema

RABBIT_ENV_CONF_EOF
flush /etc/rabbitmq/enabled_plugins << ENABLED_PLUGINS_EOF
[
{{- if eq (getv "/host/role") "disc" }}
  rabbitmq_delayed_message_exchange,
{{- end }}
  rabbitmq_management,
  rabbitmq_peer_discovery_etcd,
  rabbitmq_mqtt,
  rabbitmq_shovel,
  rabbitmq_shovel_management,
  rabbitmq_federation,
  rabbitmq_federation_management,
  rabbitmq_stomp,
  rabbitmq_web_mqtt,
  rabbitmq_web_stomp,
  rabbitmq_peer_discovery_etcd
].
ENABLED_PLUGINS_EOF
flush /etc/logrotate.d/rabbitmq-server << LOGROTATE_EOF
${DATA_MOUNTS}/log/rabbitmq/*.log {
    weekly
    missingok
    rotate 20
    compress
    notifempty
}
${DATA_MOUNTS}/log/rabbitmq/log/*.log {
    weekly
    missingok
    rotate 20
    compress
    notifempty
}
LOGROTATE_EOF
